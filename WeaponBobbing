using UnityEngine;

public class GunBobbing : MonoBehaviour
{
    [Header("Bobbing Settings")]
    public float bobbingAmount = 0.05f; // Amount of bobbing
    public float bobbingSpeed = 0.18f; // Speed of bobbing
    public float smoothness = 0.1f; // Smoothness of bobbing

    [Header("Sprinting Settings")]
    public Vector3 sprintPosition = new Vector3(0, -0.1f, 0.3f); // Position of the gun when sprinting
    public Vector3 sprintRotation = new Vector3(10, 0, 0); // Rotation of the gun when sprinting
    public float sprintTransitionSpeed = 10f; // Speed of transition to sprint position

    private Vector3 originalPosition;
    private Quaternion originalRotation;
    private bool isAiming = false;
    private bool isSprinting = false;

    void Start()
    {
        originalPosition = transform.localPosition;
        originalRotation = transform.localRotation;
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(1)) // Right click
        {
            isAiming = true;
        }
        else if (Input.GetMouseButtonUp(1)) // Release right click
        {
            isAiming = false;
        }

        if (Input.GetKey(KeyCode.LeftShift) && (Input.GetAxis("Vertical") > 0)) // Left shift + moving forward
        {
            isSprinting = true;
        }
        else
        {
            isSprinting = false;
        }

        if (isSprinting)
        {
            HandleSprinting();
        }
        else if (!isAiming)
        {
            HandleBobbing();
        }
        else
        {
            // Reset position and rotation when aiming
            transform.localPosition = Vector3.Lerp(transform.localPosition, originalPosition, Time.deltaTime * 10);
            transform.localRotation = Quaternion.Lerp(transform.localRotation, originalRotation, Time.deltaTime * 10);
        }
    }

    void HandleBobbing()
    {
        float waveslice = 0.0f;
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        if (Mathf.Abs(horizontal) == 0 && Mathf.Abs(vertical) == 0)
        {
            timer = 0.0f;
        }
        else
        {
            waveslice = Mathf.Sin(timer);
            timer += bobbingSpeed;
            if (timer > Mathf.PI * 2)
            {
                timer -= Mathf.PI * 2;
            }
        }

        if (waveslice != 0)
        {
            float translateChange = waveslice * bobbingAmount;
            float totalAxes = Mathf.Clamp01(Mathf.Abs(horizontal) + Mathf.Abs(vertical));
            translateChange = totalAxes * translateChange;

            Vector3 localPos = transform.localPosition;
            localPos.y = originalPosition.y + translateChange;
            localPos.x = originalPosition.x + translateChange * 0.5f; // Adjust horizontal bobbing here
            transform.localPosition = Vector3.Lerp(transform.localPosition, localPos, smoothness);
        }
        else
        {
            transform.localPosition = Vector3.Lerp(transform.localPosition, originalPosition, smoothness);
        }
    }

    void HandleSprinting()
    {
        transform.localPosition = Vector3.Lerp(transform.localPosition, sprintPosition, Time.deltaTime * sprintTransitionSpeed);
        transform.localRotation = Quaternion.Lerp(transform.localRotation, Quaternion.Euler(sprintRotation), Time.deltaTime * sprintTransitionSpeed);
    }
}
