using UnityEngine;

public class Barricade : MonoBehaviour
{
    public float maxHealth = 100f; // Maximum health of the barricade
    public float currentHealth; // Current health of the barricade

    public GameObject explosionEffect; // Explosion effect prefab
    public float explosionRadius = 5f; // Radius of the explosion affecting the barricade
    public float explosionDamage = 20f; // Damage caused by the explosion

    private bool isDestroyed = false;

    private void Start()
    {
        currentHealth = maxHealth;
    }

    public void TakeDamage(float damage)
    {
        if (isDestroyed)
            return;

        currentHealth -= damage;

        if (currentHealth <= 0)
        {
            DestroyBarricade();
        }
    }

    void DestroyBarricade()
    {
        isDestroyed = true;

        // Play explosion effect
        Instantiate(explosionEffect, transform.position, transform.rotation);

        // Apply explosion damage to nearby objects
        Collider[] colliders = Physics.OverlapSphere(transform.position, explosionRadius);
        foreach (Collider collider in colliders)
        {
            Barricade barricade = collider.GetComponent<Barricade>();
            if (barricade != null && barricade != this)
            {
                barricade.TakeDamage(explosionDamage);
            }
        }

        // Destroy the barricade object
        Destroy(gameObject);
    }

    private void OnCollisionEnter(Collision collision)
    {
        // Example: If you want the barricade to be destroyed by a physical collision (e.g., from a physics object)
        if (collision.relativeVelocity.magnitude > 10f)
        {
            DestroyBarricade();
        }
    }
}
