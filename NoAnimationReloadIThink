using System.Collections;
using UnityEngine;

public class WeaponReload : MonoBehaviour
{
    // Public variables to adjust the reload animation
    public Transform weaponModel; // Reference to the weapon's main model
    public Transform armsModel;   // Reference to the arms or attachment model
    public Vector3 weaponReloadPositionOffset = new Vector3(0, -0.5f, 0);
    public Vector3 weaponReloadRotationOffset = new Vector3(20f, 0, 0); // Rotation offsets in degrees
    public Vector3 armsReloadPositionOffset = new Vector3(0, 0.2f, 0);
    public Vector3 armsReloadRotationOffset = new Vector3(-10f, 0, 0); // Rotation offsets in degrees
    public float reloadDuration = 0.5f;
    public AudioClip reloadSound;

    private Vector3 weaponOriginalPosition;
    private Quaternion weaponOriginalRotation;
    private Vector3 armsOriginalPosition;
    private Quaternion armsOriginalRotation;
    private bool isReloading = false;
    private AudioSource audioSource;

    void Start()
    {
        // Save original positions and rotations
        weaponOriginalPosition = weaponModel.localPosition;
        weaponOriginalRotation = weaponModel.localRotation;
        armsOriginalPosition = armsModel.localPosition;
        armsOriginalRotation = armsModel.localRotation;

        // Get AudioSource component for playing reload sound
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
    }

    void Update()
    {
        // Trigger reload animation with the R key
        if (Input.GetKeyDown(KeyCode.R) && !isReloading)
        {
            StartCoroutine(ReloadWeapon());
        }
    }

    IEnumerator ReloadWeapon()
    {
        isReloading = true;

        // Play reload sound if assigned
        if (reloadSound != null)
        {
            audioSource.PlayOneShot(reloadSound);
        }

        float elapsedTime = 0;
        float duration = reloadDuration; // Use reloadDuration from inspector

        // Smoothly move and rotate the weapon down
        while (elapsedTime < duration / 2)
        {
            float normalizedTime = elapsedTime / (duration / 2);
            weaponModel.localPosition = Vector3.Lerp(weaponOriginalPosition, weaponOriginalPosition + weaponReloadPositionOffset, normalizedTime);
            weaponModel.localRotation = Quaternion.Lerp(weaponOriginalRotation, Quaternion.Euler(weaponOriginalRotation.eulerAngles + weaponReloadRotationOffset), normalizedTime);
            armsModel.localPosition = Vector3.Lerp(armsOriginalPosition, armsOriginalPosition + armsReloadPositionOffset, normalizedTime);
            armsModel.localRotation = Quaternion.Lerp(armsOriginalRotation, Quaternion.Euler(armsOriginalRotation.eulerAngles + armsReloadRotationOffset), normalizedTime);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        // Ensure the weapon and arms are exactly at the reload position and rotation
        weaponModel.localPosition = weaponOriginalPosition + weaponReloadPositionOffset;
        weaponModel.localRotation = Quaternion.Euler(weaponOriginalRotation.eulerAngles + weaponReloadRotationOffset);
        armsModel.localPosition = armsOriginalPosition + armsReloadPositionOffset;
        armsModel.localRotation = Quaternion.Euler(armsOriginalRotation.eulerAngles + armsReloadRotationOffset);
        elapsedTime = 0;

        // Smoothly move and rotate the weapon and arms back up
        while (elapsedTime < duration / 2)
        {
            float normalizedTime = elapsedTime / (duration / 2);
            weaponModel.localPosition = Vector3.Lerp(weaponOriginalPosition + weaponReloadPositionOffset, weaponOriginalPosition, normalizedTime);
            weaponModel.localRotation = Quaternion.Lerp(Quaternion.Euler(weaponOriginalRotation.eulerAngles + weaponReloadRotationOffset), weaponOriginalRotation, normalizedTime);
            armsModel.localPosition = Vector3.Lerp(armsOriginalPosition + armsReloadPositionOffset, armsOriginalPosition, normalizedTime);
            armsModel.localRotation = Quaternion.Lerp(Quaternion.Euler(armsOriginalRotation.eulerAngles + armsReloadRotationOffset), armsOriginalRotation, normalizedTime);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        // Ensure the weapon and arms are exactly back at the original position and rotation
        weaponModel.localPosition = weaponOriginalPosition;
        weaponModel.localRotation = weaponOriginalRotation;
        armsModel.localPosition = armsOriginalPosition;
        armsModel.localRotation = armsOriginalRotation;

        isReloading = false;
    }
}
